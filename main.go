package main

import (
 "fmt"
 "strings"
 "github.com/skycoin/skycoin/src/cipher"
 "os"
 "bufio"
 "math/rand"
 "time"
)

var (
 // This is a dev seed and address generated by the Skycoin desktop wallet. There are no funds here.
 testSeed    = "slim uncover profit circle slush donor gift marriage ill exact"  // add test seed string here
 testAddress = "22rP6UB5qojB9BT8kt9eBAfNQCfkicyg6EU" // add test wallet address here
)

func main() {
		var twelveWordSeed [12]string //array with 12 dimensions
		var seedString string
		words := strings.Fields(testSeed)
		fmt.Println(words, len(words))

        wordlength := len(words) //word length from test seed
        fmt.Println("Word count", wordlength)

        //If seed doesn't equal 12 pick remaining words from wordlist.txt
        if wordlength != 12 {
                fmt.Println("Not equal to 12")
                add := 12 - wordlength  //how many words to add
                fmt.Println("Amount of words to add", add)
                // add in words to make seed 12.
                addWordsToSeed := addSeedWords(add)//get new words here
                fmt.Println("addSeedWords: ", addWordsToSeed)
				
				//for loop to enter addwords to seed
				for i := 0; i < len(addWordsToSeed); i++{
				words = append(words, addWordsToSeed[i])
				fmt.Println("updatedWords:    ", words)
			}
		}
		
		for i := 0; i < 12; i++ {
		twelveWordSeed[i] = words[i]
		seedString += words[i] + " "
	}

	
 fmt.Println("Entered Seed:    ", testSeed)
 fmt.Println("Seed String:    ", seedString)
  fmt.Println("Address: ", recoverWalletAddressFromSeed(seedString))

}

func addSeedWords(n int) []string {
        sum := 0
        var name []string
        random := LinesInFile("Wordlist.txt")
        for sum < n {
        rand.Seed(time.Now().UTC().UnixNano())
        randomnumber := rand.Intn(2047)
        fmt.Println("randomnumber: ", randomnumber)
        name = append(name, random[randomnumber])
        sum ++
}
return name 
}

func recoverWalletAddressFromSeed(seed string) string {
	// Generate the first address from the seed
	pk,_,_ := cipher.GenerateDeterministicKeyPair([]byte(seed))
   
	//pk, _ := cipher.GenerateDeterministicKeyPair([]byte(seed))
	addr := cipher.AddressFromPubKey(pk)
	return addr.String()
   }
   
func WordCount(s string) map[string]int {
	   words := strings.Fields(s)
	   m := make(map[string]int)
	   for _, word := range words {
		   m[word] += 1
	   }
	   return m
   }
   
   
func LinesInFile(fileName string) []string {
	   f, _ := os.Open(fileName)
	   // Create new Scanner.
	   scanner := bufio.NewScanner(f)
	   result := []string{}
 // Use Scan.
 for scanner.Scan() {
	line := scanner.Text()
	// Append line to result.
	result = append(result, line)
}
return result
}

	   
