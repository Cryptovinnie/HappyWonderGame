package main

import (
 "fmt"
 "strings"
 "github.com/skycoin/skycoin/src/cipher"
 "os"
 "bufio"
 "math/rand"
 "time"
)

var (
 // This is a dev seed and address generated by the Skycoin desktop wallet. There are no funds here.
 testSeed    = "slim uncover profit circle slush donor gift marriage ill exact"  // add test seed string here
 testAddress = "22rP6UB5qojB9BT8kt9eBAfNQCfkicyg6EU" // add test wallet address here
)

func main() {
	wordmap := WordCount(testSeed)
	fmt.Println("Word count", len(wordmap))
	seedLength := len(wordmap)
	var addWordsToSeed string
	//If seed doesn't equal 12 pick remaining words from wordlist.txt
	if seedLength != 12 {
		fmt.Println("Not equal to 12")
		add := 12 - seedLength  
		fmt.Println("Amount of words to add", add)
		// add in words to make seed 12. 
		addWordsToSeed := addSeedWords(add)
		fmt.Println("addSeedWords: ", addWordsToSeed)
	}
fmt.Sprintf("%s%s", testSeed, addWordsToSeed)

	// defer fmt.Println("Finished")
 fmt.Println("Seed:    ", testSeed)
 fmt.Println("Address: ", recoverWalletAddressFromSeed(testSeed))
 
}

func addSeedWords(n int) []string {
	sum := 0 
	var name []string
	random := LinesInFile("Wordlist.txt")
	for sum < n {
	rand.Seed(time.Now().UTC().UnixNano())
	randomnumber := rand.Intn(2047)
	fmt.Println("randomnumber: ", randomnumber)
	name = append(name, random[randomnumber])
	sum ++
}
	return name
	
}

func recoverWalletAddressFromSeed(seed string) string {
 // Generate the first address from the seed
 pk,_,_ := cipher.GenerateDeterministicKeyPair([]byte(seed))
				
 //pk, _ := cipher.GenerateDeterministicKeyPair([]byte(seed))
 addr := cipher.AddressFromPubKey(pk)
 return addr.String()
}

func WordCount(s string) map[string]int { 
    words := strings.Fields(s) 
    m := make(map[string]int) 
    for _, word := range words { 
        m[word] += 1 
    } 
    return m 
}


func LinesInFile(fileName string) []string {
    f, _ := os.Open(fileName)
    // Create new Scanner.
    scanner := bufio.NewScanner(f)
    result := []string{}
    // Use Scan.
    for scanner.Scan() {
        line := scanner.Text()
        // Append line to result.
        result = append(result, line)
    }
    return result
}
